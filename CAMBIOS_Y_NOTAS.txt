Proyecto: Skater Store / SkaterShop (Next.js + Zustand)
Repositorio remoto (público): https://github.com/internationalskateboard-dev/skatershop.git
Versión base documentada: SKATER-SYNC2-V1.0
Fuente local original: skater-store-sync2.zip
Fecha de esta actualización: 2025-10-31
Nota: este documento es la guía de sincronización entre lo que hablamos aquí y lo que está en GitHub. TODO cambio aceptado aquí debe reflejarse en este archivo y luego subirse al repo en la rama/main correspondiente.

============================================================
0. OBJETIVO DE ESTA VERSIÓN
============================================================
- Consolidar la estructura real del repo público `skatershop`.
- Dejar clara la separación de componentes: /components/layout y /components/ui.
- Unificar el tipado de productos y ventas en un solo lugar: lib/types.ts.
- Actualizar el hook de catálogo: lib/useMergedProducts.ts para que soporte API + fallback local.
- Documentar las nuevas rutas de API: /api/products, /api/sales, /api/checkout.
- Unificar el uso de la imagen placeholder en TODA la app.
- Dejar lista la base para migrar el admin a API (siguiente paso).

============================================================
1. ESTRUCTURA PRINCIPAL DEL PROYECTO
============================================================
El proyecto está organizado con Next.js 13+ (App Router) y orientación a e-commerce con estado en cliente (Zustand).

- app/
  - layout.tsx           ← layout raíz, monta Navbar
  - page.tsx             ← landing / home actual
  - shop/
    - page.tsx           ← catálogo principal
  - products/
    - [id]/
      - page.tsx         ← detalle de producto
  - cart/
    - page.tsx           ← carrito
  - checkout/
    - page.tsx           ← checkout con PayPal sandbox
  - admin/
    - page.tsx           ← panel admin simple (password en cliente)
  - api/
    - products/
      - route.ts         ← GET/POST de productos (versión pre-backend)
    - sales/
      - route.ts         ← GET/POST de ventas
    - checkout/
      - route.ts         ← validación de stock + registro de venta + reducción de stock
  - (futuro)
    - uploads/route.ts   ← para mover imágenes base64 a archivos reales
    - auth/...           ← sólo si se habilita autenticación

- components/
  - layout/
    - Navbar.tsx         ← header global, oculta carrito en /admin
    - ClientOnly.tsx     ← wrapper para evitar hydration mismatch
    - CartBadge.tsx      ← contador animado del carrito (framer-motion)
  - ui/
    - ProductCard.tsx    ← tarjeta de producto para /shop
    - (futuras tarjetas, modales, botones reutilizables)

- store/   (Zustand)
  - cartStore.ts         ← carrito persistente con talla
  - productStore.ts      ← productos creados desde admin
  - salesStore.ts        ← registro de ventas en memoria

- lib/
  - types.ts             ← tipos compartidos: Product, SaleItem, SaleRecord
  - constants.ts         ← PRODUCT_PLACEHOLDER_IMAGE
  - productsBase.ts      ← productos mock base (catálogo inicial)
  - useMergedProducts.ts ← hook que unifica API + store local + base

- public/
  - images/
    - logo-skater-yellow.svg
    - placeholder.png     ← 800x800, gris oscuro, texto “SKATER STORE – NO IMAGE”
    - (otras imágenes de productos)

- tailwind.config.(js|ts)
- postcss.config.js
- tsconfig.json           ← con alias "@/..." ya configurado

============================================================
2. DESCRIPCIÓN DE RUTAS (APP ROUTER)
============================================================

------------------------------------------------------------
2.1 app/layout.tsx
------------------------------------------------------------
- Renderiza el <html> y <body>.
- Incluye el <Navbar /> de forma global.
- Usa el theme oscuro por defecto.
- Navbar detecta ruta con usePathname():
  - si pathname empieza por /admin → no muestra enlace de carrito.

------------------------------------------------------------
2.2 app/page.tsx (Home)
------------------------------------------------------------
- Página inicial sencilla.
- Explica la tienda y lleva a /shop.
- NO es el catálogo.

------------------------------------------------------------
2.3 app/shop/page.tsx (Catálogo principal)
------------------------------------------------------------
- Muestra la tienda real.
- Obtiene los productos desde el hook actualizado: lib/useMergedProducts.ts
  - 1) intenta GET /api/products
  - 2) si falla → usa productos del store local (admin)
  - 3) siempre mezcla con lib/productsBase.ts
  - 4) los productos de API o admin pisan a los base si tienen el mismo id
- Muestra botón “Carrito (N)” con useCartStore().countItems()
- Renderiza cada producto con <ProductCard product={p} />
- Soporta imagen faltante porque la tarjeta usa el placeholder global.

------------------------------------------------------------
2.4 app/products/[id]/page.tsx (Detalle de producto)
------------------------------------------------------------
- Página dinámica: /products/{id}
- Busca el producto dentro del array unificado (el mismo que usa /shop)
- Muestra:
  - Imagen grande con fallback
  - Nombre / descripción / detalles
  - Precio seguro: €{Number(product.price ?? 0).toFixed(2)}
  - Selector de talla si el producto tiene sizes[]
- Comportamientos clave:
  - Si el producto ya está en el carrito → botón “Ya en carrito ✅”
  - Si el usuario cambia de talla estando en carrito → llama a cartStore.setItemSize(id, size) y muestra toast verde “Talla cambiada en el carrito ✅”
  - Si el producto tiene tallas y no se ha elegido → muestra toast rojo “Selecciona una talla antes de añadir.”
  - Al añadir se muestra botón de “Pagar” en móvil

------------------------------------------------------------
2.5 app/cart/page.tsx (Carrito)
------------------------------------------------------------
- Usa <ClientOnly> para renderizar en cliente.
- Usa useCartStore() para:
  - listar items
  - actualizar cantidad
  - quitar producto
  - vaciar carrito
  - calcular total
- Cada línea muestra:
  - imagen (siempre con PRODUCT_PLACEHOLDER_IMAGE si no hay)
  - nombre
  - talla (si existe en el item)
  - precio unitario seguro
  - controles +/- que no permiten bajar de 1
  - subtotal del producto
- Acciones al final:
  - “Ir al Checkout → /checkout”
  - “Seguir comprando → /shop”

------------------------------------------------------------
2.6 app/checkout/page.tsx (Checkout con PayPal)
------------------------------------------------------------
- 2 columnas:
  1) Formulario de Envío & Contacto (todos los campos obligatorios)
  2) Resumen del pedido
- Resumen del pedido:
  - lista de items del carrito
  - miniatura siempre con PRODUCT_PLACEHOLDER_IMAGE
  - talla (si tiene)
  - qty × precio
  - totales de productos, envío, descuento y total
- Pago:
  - PayPal en sandbox (`clientId: "test"`)
  - Antes de crear la orden:
    - consulta el productStore en memoria
    - si falta stock → corta el proceso
  - Al aprobar:
    - construye un batch → [{ productId, qty }]
    - llama a salesStore.addSaleBatch(batch)
    - llama a productStore.reduceStockBatch(batch)
    - limpia el carrito
    - muestra tarjeta verde “Pago completado”
- Estética: se mantiene la que pediste (“no tocar la estética”)
- Botón “Vaciar carrito” queda comentado en el header, como en tu versión original.

------------------------------------------------------------
2.7 app/admin/page.tsx (Panel Admin)
------------------------------------------------------------
- Página con autenticación muy simple en cliente: contraseña “skateradmin”, guardada en sessionStorage.
- Al autenticarse:
  - muestra formulario de producto (id, name, price, stock, desc, details, sizes, image)
  - muestra la lista de productos existentes
  - permite cargar imagen en base64 para no depender de backend
  - permite clonar un producto bloqueado como nuevo (`-v2`)
- EN ESTA FASE: el admin sigue escribiendo en el store local (Zustand),
  pero ya tenemos las rutas /api/products para migrarlo.

============================================================
3. API ROUTES (BACKEND DENTRO DEL MISMO PROYECTO)
============================================================
Estas rutas están dentro de app/api/ y son parte del mismo proyecto Next.js. Son el primer paso hacia un backend real. Se documentan aquí porque el usuario pidió “mixto todo”.

------------------------------------------------------------
3.1 app/api/products/route.ts
------------------------------------------------------------
Métodos:
- GET
  - Devuelve la lista de productos que están actualmente en el store local (`useProductStore.getState().products`)
  - Respuesta:
    {
      ok: true,
      count: number,
      products: Product[]
    }
- POST
  - Crea o actualiza un producto.
  - Requiere: id, name, price
  - Guarda en el store.
  - ⚠️ Aún sin autenticación (pendiente fase backend real).

Uso previsto:
- El admin (frontend) puede empezar a usar este endpoint para crear/editar productos.
- `useMergedProducts` ya está preparado para leer desde aquí primero.

------------------------------------------------------------
3.2 app/api/sales/route.ts
------------------------------------------------------------
Métodos:
- GET
  - Devuelve todo el historial de ventas (salesStore)
- POST
  - Registra una venta con el mismo formato que usa el checkout:
    { items: [{ productId, qty, size? }], customer?, total? }

Uso previsto:
- Dashboard de admin en el futuro.
- Integración con reportes.

------------------------------------------------------------
3.3 app/api/checkout/route.ts
------------------------------------------------------------
Método:
- POST
  - Recibe:
    {
      items: [{ productId, qty, size? }, ...],
      customer?: {...},
      total?: number
    }
  - Valida stock en productStore
  - Si hay productos sin stock → responde 409 con detalle
  - Si está todo bien:
    - registra la venta en salesStore
    - reduce stock en productStore
    - responde 201 OK

Uso previsto:
- Más adelante, mover la lógica de PayPal a server-side y llamar a este endpoint desde el cliente.
- Reemplazar la validación que ahora está en el componente.

============================================================
4. LIBRERÍAS / HOOKS / CONSTANTES
============================================================

------------------------------------------------------------
4.1 lib/types.ts
------------------------------------------------------------
Tipos compartidos entre frontend (páginas), stores (Zustand) y API (app/api/...):
- Product
  - id: string
  - name: string
  - price: number
  - desc?: string
  - details?: string
  - image?: string
  - sizes?: string[]
  - stock?: number
  - locked?: boolean
- SaleItem
  - productId: string
  - qty: number
  - size?: string
- SaleRecord
  - id: string
  - items: SaleItem[]
  - createdAt: string
  - total?: number
  - customer?: { fullName?, email?, phone?, country? }

------------------------------------------------------------
4.2 lib/constants.ts
------------------------------------------------------------
- PRODUCT_PLACEHOLDER_IMAGE = "/images/placeholder.png"
  - Se usa en:
    - components/ui/ProductCard.tsx
    - app/shop/page.tsx
    - app/products/[id]/page.tsx
    - app/cart/page.tsx
    - app/checkout/page.tsx

------------------------------------------------------------
4.3 lib/productsBase.ts
------------------------------------------------------------
- Array de productos iniciales tipados como Product[]
- Se mezcla SIEMPRE con los productos del admin o de la API
- Los productos del admin/API pisan a los base si coinciden por id

------------------------------------------------------------
4.4 lib/useMergedProducts.ts (actualizado 2025-10-31)
------------------------------------------------------------
- NUEVO COMPORTAMIENTO:
  1. Intenta fetch("/api/products") → si responde OK, usa esos.
  2. Si falla, no existe la ruta, o no hay backend → usa store/productStore.ts (admin).
  3. Siempre añade lib/productsBase.ts y, si hay repetidos, los de API/admin ganan.
- Devuelve:
  - products: Product[]
  - loading: boolean
  - error: string | null
  - source: "api" | "local"
- NOTA: esta doble fuente (API + local) es PROVISIONAL. Cuando el backend esté estable, eliminar el fallback local y dejar solo la API.

============================================================
5. STORES (ZUSTAND)
============================================================

------------------------------------------------------------
5.1 store/cartStore.ts (actualizado)
------------------------------------------------------------
- Carrito persistente con:
  - id, name, price, qty, image?, size?
- addToCart:
  - si el item ya existe → suma qty, actualiza imagen (si llegó), actualiza talla (si llegó)
  - si no existe → lo añade con placeholder si no hay imagen
- updateQty:
  - nunca deja cantidad < 1
- setItemSize:
  - pensado para lo que hace /products/[id]
- total:
  - suma segura con Number(...) para evitar NaN
- countItems:
  - cuenta unidades totales
- persistencia:
  - clave: "skatershop-cart-v1"

------------------------------------------------------------
5.2 store/productStore.ts (actualizado)
------------------------------------------------------------
- Usa tipo Product de lib/types.ts
- Reexporta el tipo Product para compatibilidad:
  - `export type { Product } from "@/lib/types";`
- Métodos:
  - addProduct(p)
  - updateProduct(id, data)
  - deleteProduct(id)
  - reduceStockBatch(batch)
  - markLocked(id)
  - findById(id)
- persistencia: "skatershop-products-v1"

------------------------------------------------------------
5.3 store/salesStore.ts (actualizado)
------------------------------------------------------------
- Usa tipos SaleItem y SaleRecord de lib/types.ts
- addSaleBatch(items, extra?)
  - se usa en checkout y en /api/sales
- getSoldQty(productId)
  - se usa en admin para decidir si mostrar “LOCKED”
- persistencia: "skatershop-sales-v1"

============================================================
6. COMPONENTES PRINCIPALES
============================================================

------------------------------------------------------------
6.1 components/layout/Navbar.tsx
------------------------------------------------------------
- Detecta /admin y oculta carrito.
- Muestra logo SVG.
- Enlaces: Home, Tienda, Carrito.
- Usa <CartBadge /> cuando no estás en admin.

------------------------------------------------------------
6.2 components/layout/CartBadge.tsx
------------------------------------------------------------
- Client component.
- Lee countItems() desde cartStore.
- Animación con framer-motion.

------------------------------------------------------------
6.3 components/ui/ProductCard.tsx (actualizado)
------------------------------------------------------------
- Tipado de producto (sin any).
- Añadir directo si no hay o hay 1 talla.
- Si hay varias tallas → redirige al detalle.
- Usa PRODUCT_PLACEHOLDER_IMAGE.
- Precio seguro: Number(product.price ?? 0).toFixed(2)

------------------------------------------------------------
6.4 components/layout/ClientOnly.tsx
------------------------------------------------------------
- Renderiza hijos solo en cliente.
- Usado en /cart, /shop y otros que lean Zustand.

============================================================
7. CONVENCIÓN DE VERSIONADO
============================================================
- Palabra clave: SKATER-SYNC2-V1.0
  - esta es la versión que proviene de skater-store-sync2.zip
  - a partir de aquí, todo cambio de estructura o API se anota debajo
- Para siguientes sincronizaciones:
  - SYNC-GIT → indicar último commit de GitHub
  - aplicar cambios aquí
  - subir al repo

============================================================
8. PENDIENTE / PRÓXIMOS PASOS
============================================================
- Migrar app/admin/page.tsx para que:
  - lea lista desde GET /api/products
  - cree/edite usando POST /api/products
  - si la API falla → caiga al store local (fallback)

- Extraer imágenes base64 del admin a una ruta /api/uploads o a /public/uploads
- Añadir vista Home de contenido (no solo /shop)
- Añadir control de no mostrar mini carrito en móvil dentro de detalle
- Conectar checkout con backend real (PayPal + validación server-side)
- Añadir autenticación básica para /admin
- Una vez el backend esté estable → quitar el fallback “local” del hook useMergedProducts

============================================================
FIN DEL ARCHIVO
============================================================


## 🟡 Actualización: 2025-10-31 — Integración completa de Checkout con API  
**Versión interna:** `SKATER-SYNC2-V1.1`  
**Rama base:** `main`  
**Repositorio:** [internationalskateboard-dev/skatershop](https://github.com/internationalskateboard-dev/skatershop)

---

### ✅ Cambios principales

#### **1. API /api/products actualizada**
- Se crea **`app/api/products/route.ts`** con soporte total a los nuevos campos:
  - `colors` → array con `{ name, image }`
  - `sizeGuide` → texto o tabla de medidas
- Usa los métodos de `useProductStore` (`findById`, `addProduct`, `updateProduct`).
- Crea o actualiza productos automáticamente sin perder metadatos.
- Devuelve estructura uniforme `{ ok, product }`.
- Compatible con futura base de datos (persistencia pendiente).

---

#### **2. API /api/checkout implementada**
- Nuevo endpoint **`app/api/checkout/route.ts`** para registrar ventas.
- Entrada esperada:
  ```json
  {
    "items": [{ "productId": "hoodie-black", "qty": 2, "size": "L" }],
    "customer": {
      "fullName": "...",
      "email": "...",
      "phone": "...",
      "country": "...",
      "adresse": "...",
      "city": "...",
      "zip": "..."
    },
    "total": 59.98
  }
