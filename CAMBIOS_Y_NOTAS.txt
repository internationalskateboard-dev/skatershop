SkaterStore Optimizado ‚Äì Build v1.0 (Octubre 2025)
=================================================

üìÅ Estructura final del proyecto
--------------------------------
app/                      Rutas Next.js (Home, Producto, Carrito, Checkout, Admin)
components/layout/        Navbar, ClientOnly, FloatingCart, CartBadge
components/ui/            ProductCard, InputField, etc.
store/                    Estados globales (Zustand): carrito, productos, ventas
lib/                      Utilidades y hooks (productos base, useMergedProducts)
public/                   Im√°genes y assets est√°ticos
next.config.mjs           Configuraci√≥n Next.js
tailwind.config.ts        Configuraci√≥n TailwindCSS
tsconfig.json             Configuraci√≥n TypeScript
package.json              Dependencias y metadatos del proyecto

‚öôÔ∏è Flujo completo del sistema
-----------------------------
1. Admin (/admin) crea o actualiza productos con id, nombre, precio, tallas y stock.
2. Esos productos viven en productStore (Zustand persistido).
3. La tienda (Home y /products/[id]) usa useMergedProducts para mostrar:
   - Productos del Admin (prioridad)
   - Productos base hardcodeados (fallback)
4. Usuario a√±ade productos al carrito (cartStore). El id incluye talla: "hoodie-black-M".
5. /cart muestra el carrito, controla que no se sobrepase el stock y avisa si queda poco.
6. /checkout:
   - Pide datos de env√≠o (nombre, pa√≠s, direcci√≥n, etc.).
   - Bloquea PayPal hasta completar esos datos.
   - Valida stock otra vez antes de crear la orden PayPal (anti-oversell).
7. onApprove (PayPal ok):
   - salesStore.addSaleBatch registra cu√°ntas unidades se vendieron de cada producto base.
   - productStore.reduceStockBatch descuenta stock disponible.
   - Se vac√≠a el carrito y se muestra mensaje de pago completado.

üîê Seguridad PayPal
-------------------
- En PayPalScriptProvider usamos NEXT_PUBLIC_PAYPAL_CLIENT_ID.
- En local va en .env.local.
- En Vercel va en las Environment Variables.
- IMPORTANTE: nunca pongas el secret privado de PayPal en el frontend.
- En producci√≥n real deber√≠as:
  - Tener una ruta API segura que cree la orden en el server usando el secret.
  - Verificar la captura del pago en tu backend antes de marcar el pedido como pagado.

üöÄ Despliegue en Vercel (gu√≠a r√°pida)
-------------------------------------
1. Sube este repo a GitHub.
2. En Vercel: "Import Project" ‚Üí selecciona el repo.
3. A√±ade la variable de entorno:
   NEXT_PUBLIC_PAYPAL_CLIENT_ID = tu Client ID (sandbox o live).
4. Deploy.
5. Listo. La tienda queda p√∫blica.

üë®‚Äçüíª Gu√≠a para nuevos desarrolladores
------------------------------------
A) Agregar nuevo producto:
   - Entra a /admin.
   - Rellena id √∫nico (ej: "hoodie-black"), precio, tallas y stock.
   - Guardar. Listo, ya aparece en la Home.

B) Cambiar stock de un producto:
   - Mientras ese producto NO haya tenido ventas, puedes actualizarlo en /admin.
   - Si ya vendi√≥, se marca como LOCKED y no deja editar ni borrar: debes clonarlo como "hoodie-black-v2".

C) Resetear datos en desarrollo:
   - Ventas: localStorage.removeItem('skaterstore-sales')
   - Carrito: localStorage.removeItem('skaterstore-cart')
   - Productos: localStorage.removeItem('skaterstore-products')
   (No hagas esto en producci√≥n.)

D) Flujo de pago:
   - /checkout valida direcci√≥n/env√≠o del cliente antes de habilitar PayPal.
   - Antes de crear la orden PayPal revisa stock actual (anti-oversell).
   - Cuando PayPal confirma, se descuenta stock y se registra la venta.

üß† Futuro siguiente paso
------------------------
1. Conectar MongoDB Atlas:
   - Colecci√≥n products (id, name, price, stock, sizes‚Ä¶)
   - Colecci√≥n orders (items comprados + datos de env√≠o)
   - Colecci√≥n sales (hist√≥rico total vendido por producto base)
   Eso permitir√≠a un Admin real multi-dispositivo y stock compartido global, no s√≥lo en localStorage.

2. App m√≥vil (Expo / React Native):
   - Se puede consumir la misma API (productos, stock, crear orden).
   - Notificaciones de "nuevo drop" y "low stock".
   - Modo offline para ver cat√°logo sin conexi√≥n.

üé® Identidad y UX de marca
--------------------------
- Paleta negro / gris / amarillo ya da una identidad skater/street.
- Recomendaci√≥n: mostrar "DROP LIMITADO" o "QUEDAN 2" en ProductCard cuando stock es bajo.
- Agregar redes sociales / IG al footer aumenta confianza.
- Despu√©s del pago, redirigir a /order/success con resumen de pedido + mensaje "te contactamos por WhatsApp" crea experiencia pro.
